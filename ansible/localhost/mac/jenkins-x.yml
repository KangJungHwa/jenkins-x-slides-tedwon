#ansible-playbook jenkins-x.yml -v --ask-become-pass

---
- hosts: localhost
  vars:
    debian_tmp_dir: /tmp/my_temp_dir
  tasks:
# Step 1. Install Jx
  - name: Clean up - uninstall jx
    command: brew uninstall --force jx
    ignore_errors: yes
  - name: Clean up - rm -rf ~/.jx
    file:
      state: absent
      path: "~/.jx"
    ignore_errors: yes
  - name: Clean up - stop & uninstall minikube
    command: "{{ item }}"
    with_items:
    - minikube stop
    - eval $(minikube docker-env -u)
    - minikube delete
    - brew cask uninstall --force minikube
    ignore_errors: yes
  - name: Clean up - rm -rf ~/.minikube
    file:
      state: absent
      path: "~/.minikube"
    ignore_errors: yes
  - name: Clean up - stop & uninstall minishift
    command: "{{ item }}"
    with_items:
    - minishift stop
    - eval $(minishift docker-env -u)
    - minishift delete
    - brew cask uninstall --force minishift
    ignore_errors: yes
  - name: Clean up - rm -rf ~/.minishift
    file:
      state: absent
      path: "~/.minishift"
    ignore_errors: yes
  - name: Clean up - rm -rf ~/.kube
    file:
      state: absent
      path: "~/.kube"
    ignore_errors: yes
  - name: Clean up - uninstall kubectl
    command: brew uninstall --force kubernetes-cli
    ignore_errors: yes
  - name: Clean up - uninstall kubernetes-helm
    command: brew uninstall --force kubernetes-helm
    ignore_errors: yes
  - name: Clean up - uninstall Hyperkit driver
    command: brew uninstall --force docker-machine-driver-xhyve
    ignore_errors: yes
  - name: Install - install Hyperkit driver step 1
    command: brew install docker-machine-driver-xhyve
  - name: Install - install Hyperkit driver step 2
    become: yes
    become_method: sudo
    file:
      path: /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
      owner: root
      group: wheel
      mode: u+s
  - name: Install - install jx step 1
    command: brew tap jenkins-x/jx
  - name: Install - install jx step 2
    command: brew install jx
  - name: Install - install kubectl
    command: brew install kubernetes-cli
  - name: Install - install kubernetes-helm
    command: brew install kubernetes-helm
  - name: Install - hub
    command: brew install hub
  - name: Install - install minikube
    command: brew cask install minikube
  - name: Install - install minishift
    command: brew cask install minishift
  - name: jx
    command: jx
    args:
      chdir: ~/Downloads
# Step 2. Create Cluster using Minikube
#  - name: install pexpect
#    pip:
#      name: pexpect
#    become: yes
#    become_method: sudo
#  - name: Create jx minikube cluster
#    expect:
#      # minikube start --memory 4096 --cpus 3 --disk-size 10GB --vm-driver hyperkit --bootstrapper=kubeadm
#      command: jx create cluster minikube
#      responses:
#        "? memory (MB) [? for help] (4096)": "2048"
#        "? disk-size (MB) [? for help] (150GB)": "50GB"
#        "Select driver:  [Use arrows to move, type to filter, ? for more help]": "hyperkit"
#        args:
#          chdir: ~/Downloads
#minikube start --memory 4096 --cpus 3 --disk-size 10GB --vm-driver hyperkit --bootstrapper=kubeadm
#minikube start --memory 4096 --cpus 8 --disk-size 150GB --vm-driver hyperkit --bootstrapper=kubeadm
#helm upgrade --namespace jx --install --timeout 6000 --version 0.0.2755 --values /Users/tedwon/.jx/cloud-environments/env-minikube/myvalues.yaml --values /Users/tedwon/.jx/cloud-environments/env-minikube/secrets.yaml --values /Users/tedwon/.jx/gitSecrets.yaml --values /Users/tedwon/.jx/adminSecrets.yaml --values /Users/tedwon/.jx/extraValues.yaml jenkins-x jenkins-x/jenkins-x-platform
#jx create cluster minikube --username admin --default-admin-password admin123! --verbose --log-level debug
#jx create cluster minishift
#jx create cluster minishift --default-admin-password admin123! --verbose --log-level debug
#jx install --provider=minishift --default-admin-password admin123! --verbose --log-level debug
#asciinema rec -i 1 -t "Creating GKE Kubernetes cluster with Jenkins X"
#jx create cluster gke --cluster-name myk8scluster1020 --username admin --default-admin-password admin123! --enable-autoupgrade=true --verbose=true => trial not support enable-autoupgrade
#asciinema rec -i 1 -t "Creating GKE Kubernetes cluster with Jenkins X"
#jx create cluster gke --cluster-name myk8scluster1027 --username admin --default-admin-password admin123! --verbose=true --log-level debug
#jx install --provider=gke --default-admin-password admin123! --verbose --log-level debug

#gcloud container clusters create myk8scluster1020 --zone asia-northeast1-a --num-nodes 3 --machine-type n1-standard-16 --enable-autoscaling --min-nodes 3 --max-nodes 5 --labels=created-by=tedwon
#gcloud container clusters create myk8scluster1020 --zone asia-northeast1-c --num-nodes 3 --machine-type n1-standard-4 --enable-autoscaling --min-nodes 3 --max-nodes 5 --labels=created-by=tedwon
# helm upgrade --namespace jx --install --timeout 6000 --version 0.0.2788 --values /Users/tedwon/.jx/cloud-environments/env-gke/myvalues.yaml --values /Users/tedwon/.jx/cloud-environments/env-gke/secrets.yaml --values /Users/tedwon/.jx/gitSecrets.yaml --values /Users/tedwon/.jx/adminSecrets.yaml --values /Users/tedwon/.jx/extraValues.yaml jenkins-x jenkins-x/jenkins-x-platform
# Step 3. Create Cloud App
#minikube dashboard
#jx create spring -d web -d actuator
#jx create spring -d web -d actuator --verbose=true --log-level debug
#jx import --verbose=true --log-level debug
#jx import --url https://github.com/tedwon/starter.git --credentials=admin-admin
#Dockerfile
#COPY target/*-fat.jar /opt/app.jar
# Watch pipeline activity via:    jx get activity -f demo181014 -w
# Browse the pipeline log via:    jx get build logs tedwon/demo181014/master
# Open the Jenkins console via    jx console
# You can list the pipelines via: jx get pipelines
# When the pipeline is complete:  jx get applications
#jx get build logs
#jx get apps
#jx open --env staging
#cd demo && jx create issue -t 'add a homepage'
#git checkout -b wip
# echo "hellow world" >> src/main/resources/static/index.html
#git add src
#git status
#git commit -a -m 'add a homepage fixes #1'
#git push origin wip
#hub pull-request
#jx env
#  dev
#jx get build logs
#jx get apps
#jx promote --version 0.0.2 --env production --timeout 1h
#jx get apps
#jx env
#jx open
#http://jenkins.jx.35.200.33.5.nip.io
#http://monocular.jx.35.200.33.5.nip.io/
#helm repo update
#helm install chartmuseum/demo101512 --version 0.0.2
#jx env dev --verbose=true
#jx status
#kubectl delete pod maven-bc4h8 --namespace jx --force=true --grace-period=0
#kubectl get pvc # You can check your storage class and persistent volume setup via:
#kubectl get services
#kubectl get pods
#kubectl get pods --all-namespaces
#kubectl get pods --namespace jx
#kubectl get pods -o wide
#kubectl describe pods 
#kubectl describe node
#You can change your production environment to use auto-deploy using jx edit environment.
#jx edit environment
# kubectl Cheat Sheet https://kubernetes.io/docs/reference/kubectl/cheatsheet/
#kubectl cluster-info
#kubectl cluster-info dump --output-directory=/path/to/cluster-state
#kubectl top node
#kubectl top pod
#kubectl logs jx-staging-demo-thorntail-102100-c7898d496-lrr5n
#kubectl logs --tail=1000 jx-staging-demo-thorntail-102100-c7898d496-lrr5n
#kubectl describe pod jx-staging-demo-thorntail-102100-c7898d496-lrr5n
#kubectl config view
#kubectl config view | grep namespace:
#kubectl config current-context
#kubectl get namespaces
#kubectl api-resources
#jx help create
#jx repository
# jx status
# Jenkins X checks passed for Cluster(gke_jwon-k8s-project_asia-northeast1-a_jwon-k8s-cluster-1110): 1 nodes, memory 13% of 27219384Ki, cpu 34% of 7910m. Jenkins is running at http://jenkins.jx.35.243.86.163.nip.io